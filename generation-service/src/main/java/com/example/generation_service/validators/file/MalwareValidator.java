package com.example.generation_service.validators.file;

import com.example.generation_service.converters.MultipartFileConverter;
import com.example.generation_service.models.enums.UploadStatus;
import com.example.generation_service.services.MalwareService;
import com.example.generation_service.validators.file.dto.FileValidationDto;
import lombok.RequiredArgsConstructor;
import org.dmnvch.bytescale.model.enumeration.MalwareCheckStatus;
import org.springframework.stereotype.Component;

import java.io.IOException;

@Component
@RequiredArgsConstructor
public class MalwareValidator implements FileValidator {

    private final MultipartFileConverter converter;
    private final MalwareService malwareService;

    @Override
    public FileValidationDto validate(FileValidationDto dto) {
        try {
            final MalwareCheckStatus result = malwareService
                    .isInfected(converter.convertToMultipartBodyPart(dto.getFile()), dto.getFile().getOriginalFilename());
            final UploadStatus uploadStatus = mapStatus(result);
            dto.setUploadStatus(uploadStatus);
            return dto;
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private UploadStatus mapStatus(final MalwareCheckStatus status) {
        if (status == null) {
            return UploadStatus.FAILED;
        }

        return switch (status) {
            case HEALTHY -> UploadStatus.SUCCESS;
            case INFECTED -> UploadStatus.MALWARE;
            default -> UploadStatus.FAILED;
        };
    }
}
